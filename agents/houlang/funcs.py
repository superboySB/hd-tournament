import math
import numpy as np
# Kp„ÄÅKi„ÄÅKdÔºöÂàÜÂà´ÊòØÊØî‰æã„ÄÅÁßØÂàÜÂíåÂæÆÂàÜÂ¢ûÁõäÂèÇÊï∞ÔºåÂÜ≥ÂÆö‰∫Ü PID ÊéßÂà∂Âô®ÂØπËØØÂ∑ÆÁöÑÂìçÂ∫îÈÄüÂ∫¶ÂíåÁ®≥ÂÆöÊÄß„ÄÇ
# setpointÔºöÊéßÂà∂ÁõÆÊ†áÂÄºÔºåÁ≥ªÁªüÂ∏åÊúõËææÂà∞ÁöÑËÆæÂÆöÂÄº„ÄÇ
# output_limitsÔºöÈôêÂà∂ËæìÂá∫ËåÉÂõ¥ÁöÑÂÖÉÁªÑÔºåÁî®‰∫éÈÅøÂÖçÊéßÂà∂ËæìÂá∫ËøáÂ§ßÊàñËøáÂ∞è„ÄÇ
# windup_guardÔºöÁßØÂàÜÈ£éÊö¥‰øùÊä§ÔºåÁî®‰∫éÈôêÂà∂ÁßØÂàÜÁ¥ØÂä†ÂÄºÔºåÈò≤Ê≠¢ÁßØÂàÜÈ°πËøáÂ§ßÂØºËá¥ÊéßÂà∂Âô®‰∏çÁ®≥ÂÆö„ÄÇ
# previous_errorÔºö‰∏ä‰∏ÄÊ¨°ËÆ°ÁÆóÁöÑËØØÂ∑ÆÂÄºÔºåÁî®‰∫éËÆ°ÁÆóÂæÆÂàÜÈ°π„ÄÇ
# integralÔºöËØØÂ∑ÆÁöÑÁßØÂàÜÁ¥ØÂä†ÂÄºÔºåÁî®‰∫éËÆ°ÁÆóÁßØÂàÜÈ°π„ÄÇ

class PID:
    def __init__(self, Kp, Ki, Kd, setpoint=0.0, output_limits=(None, None), windup_guard=None):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.setpoint = setpoint
        self.output_limits = output_limits
        self.windup_guard = windup_guard
        self.previous_error = 0.0
        self.integral = 0.0

    def compute(self, measured_value, length=1):
        error = self.setpoint - measured_value
        error /= length
        self.integral += error

        # Apply windup guard
        if self.windup_guard is not None:
            self.integral = max(min(self.integral, self.windup_guard), -self.windup_guard)

        derivative = error - self.previous_error
        self.previous_error = error

        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative

        # Apply output limits
        if self.output_limits[0] is not None:
            output = max(output, self.output_limits[0])
        if self.output_limits[1] is not None:
            output = min(output, self.output_limits[1])

        return output
    
    def set_setpoint(self, setpoint):
        self.setpoint = setpoint

    def reset(self):
        self.previous_error = 0.0
        self.integral = 0.0

# Â¢ûÂ§ß ùêæùëù: ÂèØ‰ª•ÊèêÈ´òÁ≥ªÁªüÂìçÂ∫îÈÄüÂ∫¶Ôºå‰ΩÜÂèØËÉΩÂ¢ûÂä†ËøáÂÜ≤ÂíåÊåØËç°„ÄÇ
# ÂáèÂ∞è ùêæùëù: ÂèØ‰ª•ÂáèÂ∞ëËøáÂÜ≤ÂíåÊåØËç°Ôºå‰ΩÜ‰ºöÈôç‰ΩéÁ≥ªÁªüÂìçÂ∫îÈÄüÂ∫¶„ÄÇ
# Â¢ûÂ§ß Ki: ÂèØ‰ª•Ê∂àÈô§Á®≥ÊÄÅËØØÂ∑ÆÔºå‰ΩÜÂèØËÉΩÂ¢ûÂä†ËøáÂÜ≤ÂíåÊåØËç°„ÄÇ
# ÂáèÂ∞è ùêæùëñ: ÂèØ‰ª•ÂáèÂ∞ëËøáÂÜ≤ÂíåÊåØËç°Ôºå‰ΩÜÂèØËÉΩÂØºËá¥Á®≥ÊÄÅËØØÂ∑ÆÂ≠òÂú®„ÄÇ 
# Â¢ûÂ§ß Kd: ÂèØ‰ª•ÂáèÂ∞ëÊåØËç°ÂíåËøáÂÜ≤Ôºå‰ΩÜÂèØËÉΩ‰ΩøÁ≥ªÁªüÂìçÂ∫îÂèòÊÖ¢„ÄÇ
# ÂáèÂ∞è Kd: ÂèØ‰ª•Âä†Âø´Á≥ªÁªüÂìçÂ∫îÔºå‰ΩÜÂèØËÉΩÂ¢ûÂä†ÊåØËç°ÂíåËøáÂÜ≤„ÄÇ

class FlyPid:
    def __init__(self):
        # ÂàùÂßãÂåñ PID ÊéßÂà∂Âô®
        self.pid_aileron = PID(Kp=0.8, Ki=0.01, Kd=0.1, output_limits=(-1, 1), windup_guard=20.0)
        self.pid_elevator = PID(Kp=0.3, Ki=0.02, Kd=0.2, output_limits=(-1, 1), windup_guard=10.0)
        self.pid_rudder = PID(Kp=0.4, Ki=0.01, Kd=0.1, output_limits=(-1, 1), windup_guard=1.0)
        self.pid_throttle = PID(Kp=0.4, Ki=0.01, Kd=0.1, output_limits=(0, 1), windup_guard=1.0)

    def set_tar_value(self, tar_pitch_rate, tar_yaw_rate, tar_roll_rate):
        self.pid_elevator.set_setpoint(math.degrees(tar_pitch_rate))
        self.pid_rudder.set_setpoint(math.degrees(tar_yaw_rate))
        self.pid_aileron.set_setpoint(math.degrees(tar_roll_rate))
        
    def get_control_cmd(self, omega_p, omega_q, omega_r):
        current_roll = math.degrees(omega_p)
        current_pitch = math.degrees(omega_q)
        current_yaw = math.degrees(omega_r)
        
        # ËÆ°ÁÆóÊéßÂà∂ËæìÂÖ•
        control_aileron = self.pid_aileron.compute(current_roll, 90)
        control_elevator = -self.pid_elevator.compute(current_pitch)
        # control_rudder = -self.pid_rudder.compute(current_yaw, 30)
        # control_throttle = pid_throttle.compute( current_airspeed, 1)

        return [control_aileron, control_elevator, 0, 1]

# Reformat the print output for easier copying and pasting
def reformat_array_for_print(name, arr):
    print(f"{name}: [")
    for row in arr:
        print(f"    {list(row)},")
    print("]")

class Vector3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __sub__(self, other):
        return Vector3(self.x - other.x, self.y - other.y, self.z - other.z)

    def distance(self, point):
        return math.sqrt((self.x - point.x)**2 + (self.y - point.y)**2 + (self.z - point.z)**2)

def degrees_limit(angle):
    if angle > 180:
        return angle - 360
    elif angle < -180:
        return angle + 360
    return angle

def is_facing_missile(missile_positions, aircraft_positions, debug=False):
    # Êó∂Èó¥Èó¥Èöî
    delta_t = 0.05

    # ËÆ°ÁÆóÈÄüÂ∫¶ÂêëÈáèÔºàÊñπÂêëÔºâ
    aircraft_directions = (aircraft_positions[1:] - aircraft_positions[:-1]) / delta_t
    missile_directions = (missile_positions[1:] - missile_positions[:-1]) / delta_t

    # ÂΩí‰∏ÄÂåñÊñπÂêëÂêëÈáè
    aircraft_directions /= np.linalg.norm(aircraft_directions, axis=1)[:, None]
    missile_directions /= np.linalg.norm(missile_directions, axis=1)[:, None]

    # ËÆ°ÁÆóÁõ∏ÂØπ‰ΩçÁΩÆÂêëÈáè
    relative_positions = missile_positions[:-1] - aircraft_positions[:-1]

    # ËÆ°ÁÆóÂØºÂºπÁõ∏ÂØπ‰ΩçÁΩÆÁöÑÂçï‰ΩçÊñπÂêëÂêëÈáè
    relative_directions = relative_positions / np.linalg.norm(relative_positions, axis=1)[:, None]

    # ËÆ°ÁÆóÈ£ûÊú∫ÂíåÂØºÂºπÁöÑÂ§πËßí
    cos_theta = np.sum(aircraft_directions * relative_directions, axis=1)
    facing_missile = cos_theta > 0
    target_position = missile_positions[-1] - missile_directions[-1] * 1000

    if debug:
        reformat_array_for_print("missile: ", missile_positions)
        reformat_array_for_print("aircraft: ", aircraft_positions)
        print("facing: ",facing_missile[-1])
        print("target_posotion: ",target_position)

    return facing_missile[-1],target_position


if __name__ == "__main__":
    # ÂØºÂºπËΩ®ËøπÊï∞ÊçÆ
    missile_positions = np.array([
        [1411.2479248384868, -37047.61788155391, 1115.9848022927656],
        [1395.388450545749, -36992.009674597255, 1089.4227393711903],
        [1408.0456248244798, -36948.9490140375, 1090.25457120456],
        [1395.5201683256228, -36920.02038622067, 1089.5284720403347],
        [1400.4414586787325, -36874.4042779964, 1077.534218174563],
        [1408.7968692754403, -36853.842192526594, 1057.6354447583947],
        [1392.9973682773016, -36810.12807336955, 1022.6973714461268],
        [1402.7613850185078, -36796.70246794948, 1037.6201758586062],
        [1406.0378555957095, -36743.58754652051, 1022.7298649208954],
        [1395.335506989685, -36709.72551958485, 998.0479089502393],
        [1422.8403106913092, -36682.218834246494, 977.0742511914001],
        [1406.010244946054, -36630.58483946624, 1000.0428240079054],
        [1417.9188717258014, -36597.6297828589, 976.0599711082975],
        [1410.3520938438287, -36559.54516058032, 972.2406913061814],
        [1393.823684385589, -36509.11858314184, 955.7213856996588],
        [1416.074131866798, -36481.070127936146, 943.9141454126365],
        [1390.404015588901, -36458.44320439465, 934.2722709551509],
        [1409.7949576308674, -36401.358035189456, 921.2712745583835],
        [1407.5864879522246, -36375.88398944857, 904.852741341116],
        [1414.256245694845, -36331.280621176695, 912.3901338039894],
        [1421.1607387265467, -36303.64471505669, 911.1105240540411],
        [1389.4095094143795, -36261.280941879384, 872.5986658847154],
        [1401.4094963732773, -36233.54385304169, 890.9174985602328],
        [1400.5433062754496, -36185.947009031464, 850.2744655993379],
        [1391.5258231999835, -36162.2065299082, 843.4725860095896],
        [1399.7746833239473, -36122.76723683992, 842.2950686080725],
        [1386.479203231808, -36078.32424594693, 822.4116396330746],
        [1403.2595381555486, -36049.134527699964, 817.1205651291901],
        [1402.5593343827209, -36010.80441873297, 814.334526815421],
        [1396.6501737201775, -35992.32510767675, 799.0506968644426],
        [1400.4778630644066, -35920.28092630948, 796.4114835824324],
        [1394.7667729210893, -35910.37047555612, 777.0225961358638],
        [1406.3374935147983, -35869.015594256205, 764.6894941759894],
        [1388.2447313214777, -35840.361626414306, 738.9796999874659],
        [1404.9405463484613, -35807.54289765229, 733.6037361878015],
        [1413.0924940745267, -35740.70806959478, 735.885010349674],
        [1392.942858743824, -35721.641442230066, 718.3555757291999],
        [1389.4696049853897, -35685.0863246186, 711.8400656131344],
        [1379.6122979133686, -35653.52997255774, 710.6731441184752],
        [1406.8040159878879, -35615.32825475804, 710.6279267428623],
        [1390.099807890342, -35572.30870643278, 686.085598408605],
        [1406.521770754498, -35536.43403010474, 681.8661491697356],
        [1392.3997828021932, -35505.67279931129, 668.3022871105726],
        [1395.7450592998382, -35468.39326034282, 665.5172525945858],
        [1400.156161450586, -35444.15313802269, 646.0109581266975],
        [1397.3096085403295, -35381.66289358325, 654.8127184411632],
        [1386.8762004645807, -35352.691099071635, 624.6141994650663],
        [1406.5793475072708, -35313.11351908365, 640.5930697936238],
        [1393.4372242084708, -35271.917338762105, 603.9388348143099],
        [1396.1364900544438, -35256.01347442524, 597.3531972137163],
    ])

    # È£ûÊú∫ËΩ®ËøπÊï∞ÊçÆ
    aircraft_positions = np.array([
        [2000.7964029553107, -20957.469375267166, -541.1453938695377],
        [2000.775830522489, -20946.65685619663, -547.5387958711126],
        [2000.7553275317457, -20935.82573662245, -553.8945563794023],
        [2000.734801013778, -20924.976027591165, -560.2125094025414],
        [2000.7141225429157, -20914.107742477947, -566.4924914887051],
        [2000.6931542496836, -20903.22089675506, -572.7343407200879],
        [2000.6717532256248, -20892.315507850446, -578.937896508518],
        [2000.649796702443, -20881.391594672023, -585.1029987188758],
        [2000.6271795267232, -20870.449177329552, -591.2294870445858],
        [2000.6038288246932, -20859.48827685493, -597.3172006533478],
        [2000.579723400593, -20848.50891479207, -603.365977628493],
        [2000.5548818786663, -20837.511113394467, -609.3756551915321],
        [2000.529364057861, -20826.49489602026, -615.3460712600154],
        [2000.5032766495597, -20815.460287880538, -621.2770675382799],
        [2000.476757598387, -20804.407315972956, -627.1684873566574],
        [2000.449971010273, -20793.336009299823, -633.0201763993027],
        [2000.4230827424892, -20782.24639901429, -638.8319826406132],
        [2000.3962587158867, -20771.138518214102, -644.6037558762728],
        [2000.3696449392617, -20760.012401798595, -650.335347412145],
        [2000.3433453591504, -20748.868086036455, -656.0266090071418],
        [2000.3174255067017, -20737.7056081509, -661.6773917195897],
        [2000.2919018540144, -20726.525006218526, -667.2875457232876],
        [2000.2667534145285, -20715.32631924753, -672.8569206197571],
        [2000.241915669628, -20704.109587325493, -678.3853658731296],
        [2000.2172931874184, -20692.87485206105, -683.8727333149855],
        [2000.1927831064152, -20681.622156598147, -689.3188762189548],
        [2000.168275996721, -20670.351545465885, -694.7236487000446],
        [2000.1436763764675, -20659.063064411803, -700.0869051457776],
        [2000.118904809629, -20647.75676033235, -705.4085001219428],
        [2000.093890911725, -20636.432681299746, -710.6882885202122],
        [2000.0685839761898, -20625.090876573027, -715.9261258942315],
        [2000.0429455189144, -20613.73139659334, -721.1218685300264],
        [2000.0169607255975, -20602.35429291516, -726.2753734482703],
        [1999.9906309823903, -20590.959618222125, -731.3864984031497],
        [1999.963959370635, -20579.547426416306, -736.4551020878826],
        [1999.936956263189, -20568.11777259925, -741.4810442494017],
        [1999.909631032924, -20556.670713069605, -746.464185581619],
        [1999.8819991580965, -20545.206305255957, -751.4043875710067],
        [1999.8540704527607, -20533.724607741337, -756.3015124352787],
        [1999.8258529033624, -20522.22568022211, -761.155423016653],
        [1999.7973655347782, -20510.709583440035, -765.9659827591477],
        [1999.7686337443058, -20499.176379224155, -770.733055926592],
        [1999.7396754592808, -20487.62612372693, -775.4564802775694],
        [1999.710488862404, -20476.058875385203, -780.1360975765983],
        [1999.68105950972, -20464.474694069977, -784.7717512153249],
        [1999.651355571616, -20452.873641798342, -789.3632891238613],
        [1999.6213388080275, -20441.255782456923, -793.91056284765],
        [1999.5909583359833, -20429.6211817687, -798.4134273987238],
        [1999.5601599649883, -20417.96990717843, -802.8717411410125],
        [1999.528905899759, -20406.302027636924, -807.285365581427],
    ])

    print(facing_missile(missile_positions, aircraft_positions, True))