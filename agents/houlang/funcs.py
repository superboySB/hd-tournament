import math
import numpy as np
# Kp、Ki、Kd：分别是比例、积分和微分增益参数，决定了 PID 控制器对误差的响应速度和稳定性。
# setpoint：控制目标值，系统希望达到的设定值。
# output_limits：限制输出范围的元组，用于避免控制输出过大或过小。
# windup_guard：积分风暴保护，用于限制积分累加值，防止积分项过大导致控制器不稳定。
# previous_error：上一次计算的误差值，用于计算微分项。
# integral：误差的积分累加值，用于计算积分项。

class PID:
    def __init__(self, Kp, Ki, Kd, setpoint=0.0, output_limits=(None, None), windup_guard=None):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.setpoint = setpoint
        self.output_limits = output_limits
        self.windup_guard = windup_guard
        self.previous_error = 0.0
        self.integral = 0.0

    def compute(self, measured_value, length=1):
        error = self.setpoint - measured_value
        error /= length
        self.integral += error

        # Apply windup guard
        if self.windup_guard is not None:
            self.integral = max(min(self.integral, self.windup_guard), -self.windup_guard)

        derivative = error - self.previous_error
        self.previous_error = error

        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative

        # Apply output limits
        if self.output_limits[0] is not None:
            output = max(output, self.output_limits[0])
        if self.output_limits[1] is not None:
            output = min(output, self.output_limits[1])

        return output
    
    def set_setpoint(self, setpoint):
        self.setpoint = setpoint

    def reset(self):
        self.previous_error = 0.0
        self.integral = 0.0

# 增大 𝐾𝑝: 可以提高系统响应速度，但可能增加过冲和振荡。
# 减小 𝐾𝑝: 可以减少过冲和振荡，但会降低系统响应速度。
# 增大 Ki: 可以消除稳态误差，但可能增加过冲和振荡。
# 减小 𝐾𝑖: 可以减少过冲和振荡，但可能导致稳态误差存在。 
# 增大 Kd: 可以减少振荡和过冲，但可能使系统响应变慢。
# 减小 Kd: 可以加快系统响应，但可能增加振荡和过冲。

class FlyPid:
    def __init__(self):
        # 初始化 PID 控制器
        self.pid_aileron = PID(Kp=0.8, Ki=0.01, Kd=0.1, output_limits=(-1, 1), windup_guard=20.0)
        self.pid_elevator = PID(Kp=0.3, Ki=0.02, Kd=0.2, output_limits=(-1, 1), windup_guard=10.0)
        self.pid_rudder = PID(Kp=0.4, Ki=0.01, Kd=0.1, output_limits=(-1, 1), windup_guard=1.0)
        self.pid_throttle = PID(Kp=0.4, Ki=0.01, Kd=0.1, output_limits=(0, 1), windup_guard=1.0)

    def set_tar_value(self, tar_pitch_rate, tar_yaw_rate, tar_roll_rate):
        self.pid_elevator.set_setpoint(math.degrees(tar_pitch_rate))
        self.pid_rudder.set_setpoint(math.degrees(tar_yaw_rate))
        self.pid_aileron.set_setpoint(math.degrees(tar_roll_rate))
        
    def get_control_cmd(self, omega_p, omega_q, omega_r):
        current_roll = math.degrees(omega_p)
        current_pitch = math.degrees(omega_q)
        current_yaw = math.degrees(omega_r)
        
        # 计算控制输入
        control_aileron = self.pid_aileron.compute(current_roll, 90)
        control_elevator = -self.pid_elevator.compute(current_pitch)
        # control_rudder = -self.pid_rudder.compute(current_yaw, 30)
        # control_throttle = pid_throttle.compute( current_airspeed, 1)

        return [control_aileron, control_elevator, 0, 1]

# Reformat the print output for easier copying and pasting
def reformat_array_for_print(name, arr):
    print(f"{name}: [")
    for row in arr:
        print(f"    {list(row)},")
    print("]")

class Vector3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __sub__(self, other):
        return Vector3(self.x - other.x, self.y - other.y, self.z - other.z)

    def distance(self, point):
        return math.sqrt((self.x - point.x)**2 + (self.y - point.y)**2 + (self.z - point.z)**2)

def degrees_limit(angle):
    if angle > 180:
        return angle - 360
    elif angle < -180:
        return angle + 360
    return angle

def determine_turn_direction(missile_positions, aircraft_positions, debug=False):
    # 时间间隔
    delta_t = 0.05

    # 计算速度向量（方向）
    aircraft_directions = (aircraft_positions[1:] - aircraft_positions[:-1]) / delta_t
    missile_directions = (missile_positions[1:] - missile_positions[:-1]) / delta_t

    # 归一化方向向量
    aircraft_directions /= np.linalg.norm(aircraft_directions, axis=1)[:, None]
    missile_directions /= np.linalg.norm(missile_directions, axis=1)[:, None]

    # 计算相对位置向量
    relative_positions = missile_positions[:-1] - aircraft_positions[:-1]

    # 计算导弹相对位置的单位方向向量
    relative_directions = relative_positions / np.linalg.norm(relative_positions, axis=1)[:, None]

    # 计算飞机和导弹的夹角
    cos_theta = np.sum(aircraft_directions * relative_directions, axis=1)
    facing_missile = cos_theta > 0

    # 计算转向后的方向
    def rotate_vector(vector, angle):
        """ Rotates a 3D vector by a given angle around the z-axis """
        rotation_matrix = np.array([
            [np.cos(angle), -np.sin(angle), 0],
            [np.sin(angle), np.cos(angle), 0],
            [0, 0, 1]
        ])
        return np.dot(rotation_matrix, vector)

    # 判断飞机在导弹轨迹的哪一侧
    def is_left_of_line(point, line_start, line_end):
        """ Determine if a point is to the left of a line segment """
        return ((line_end[0] - line_start[0]) * (point[1] - line_start[1]) - 
                (line_end[1] - line_start[1]) * (point[0] - line_start[0])) > 0

    # 计算偏转方向
    def calculate_turn_direction(aircraft_dir, missile_dir, relative_dir, facing_missile, aircraft_pos, missile_pos):
        left_dir = rotate_vector(aircraft_dir, np.radians(5))
        right_dir = rotate_vector(aircraft_dir, np.radians(-5))
        
        left_cos_theta = np.dot(left_dir, relative_dir)
        right_cos_theta = np.dot(right_dir, relative_dir)
        
        if facing_missile:
            # 当前面向导弹，选择使夹角最接近180度的方向
            return "left" if left_cos_theta < right_cos_theta else "right"
        else:
            # 当前背对导弹，判断飞机在导弹轨迹的左侧还是右侧
            missile_line_start = missile_positions[-2]
            missile_line_end = missile_positions[-1]
            aircraft_pos_latest = aircraft_positions[-1]
            if is_left_of_line(aircraft_pos_latest, missile_line_start, missile_line_end):
                # 飞机在导弹轨迹的左侧，应该右转以远离
                return "right"
            else:
                # 飞机在导弹轨迹的右侧，应该左转以远离
                return "left"

    # 计算最新时间点的最佳转向
    latest_index = -2
    turn_direction = calculate_turn_direction(
        aircraft_directions[latest_index], 
        missile_directions[latest_index], 
        relative_directions[latest_index], 
        facing_missile[latest_index], 
        aircraft_positions[latest_index], 
        missile_positions[latest_index]
    )
    
    if debug:
        reformat_array_for_print("missile: ", missile_positions)
        reformat_array_for_print("aircraft: ", aircraft_positions)
        print("facing: ",facing_missile[latest_index])
        print("direction: ",turn_direction)

    return facing_missile[latest_index], turn_direction


if __name__ == "__main__":
    # 导弹轨迹数据
    missile_positions = np.array([
        [1998.3594376715769, -44979.579750635654, 2007.8335035182388],
        [1991.600274488417, -44993.86038892598, 1991.3394302181168],
        [2000.7030260996048, -44960.76366137329, 2008.145833685347],
        [1971.4386615316091, -44924.29434911182, 2021.4227136703057],
        [2001.2893171050036, -44922.7079690937, 1984.3594588375931],
        [1987.4268579559307, -44910.7694178424, 1994.1581837165818],
        [1982.9705503469324, -44884.3095077619, 2006.4684406985543],
        [1975.151619184845, -44868.553433934714, 1991.390496654683],
        [1971.6045710331732, -44863.75923922508, 1981.2588265567422],
        [1974.6957813415218, -44852.406260625845, 2017.9265076058603],
        [1971.1149894658702, -44819.47693368795, 1978.0946075941388],
        [1964.2655901704923, -44831.041366277845, 2008.9709212877403],
        [1969.0057964841046, -44788.705639078034, 2005.5666069875274],
        [1957.706515728794, -44783.13481747632, 2022.2098302165211],
        [1966.350046279021, -44769.543772635, 2008.5188559781354],
        [1943.5643591991, -44741.30323977428, 2003.2003258426687],
        [1981.9169482267332, -44743.2763630599, 2006.4386774103027],
        [1943.3104108477914, -44730.94408198525, 1984.8660587423865],
        [1945.4784900088848, -44715.4529014538, 2002.0950039575416],
        [1945.241861933405, -44701.76586847764, 2008.4401326109644],
        [1955.1287359952228, -44684.87876869147, 2023.7297135120996],
        [1950.4629511392893, -44669.650950410294, 2000.2239539211416],
        [1953.2164893411107, -44638.47736894815, 1999.8867372700618],
        [1946.5678547473503, -44646.930123021404, 2015.9089993073278],
        [1942.8342882453858, -44614.30894666466, 1999.7269967635082],
        [1919.0206505645954, -44611.97972743925, 2008.6405079338736],
        [1940.682747223396, -44582.46680224489, 2018.7945111173012],
        [1922.2469375153278, -44591.09153122657, 2011.9691058535775],
        [1924.1330648036292, -44558.319661617024, 2003.083137700652],
        [1920.7982237684605, -44550.299193395535, 1992.0417718530857],
        [1908.8538419591391, -44546.62334927055, 1999.1832178167301],
        [1913.6885921265462, -44519.020468755385, 1983.5630111951546],
        [1916.9102692556833, -44507.0247884593, 2013.8194479035822],
        [1925.973612691638, -44465.78804919967, 2003.443580362517],
        [1911.199445219719, -44463.930117276315, 1992.2725767177592],
        [1905.1228890114608, -44449.29657908797, 2000.4162221488734],
        [1901.1702412960065, -44436.66254998998, 2009.6916973092045],
        [1911.23443816051, -44426.786670044734, 2000.272253696861],
        [1915.5716941252656, -44406.36144334212, 1992.4421163507493],
        [1890.550188269036, -44400.79379781198, 2013.7608392967659],
        [1904.3615598635586, -44366.733612598255, 2002.8853539075133],
        [1898.4589667815058, -44388.17123034095, 2009.6916455503022],
        [1900.1896697836632, -44337.93115417391, 2011.4195046344512],
        [1875.3629299873414, -44333.870394155114, 2016.2309469036534],
        [1886.7971708370085, -44300.60888194995, 1987.9464075128617],
        [1886.7466851266656, -44311.100606741675, 2020.1268432078293],
        [1870.1245202404334, -44273.43980121991, 2005.4128125898321],
        [1875.4613696400909, -44280.33690981144, 2015.360396696341],
        [1854.2087417890511, -44262.95517833521, 2009.1923969128534],
        [1890.6001401994224, -44242.885558686256, 1998.2917292467675],
        [1873.2535143178177, -44217.41826325844, 2009.867355988969],
        [1861.2205701346602, -44220.03537327501, 2020.1688978857035],
        [1879.8605343203435, -44186.74534519437, 2009.0483650442752],
        [1851.9829331932592, -44174.801494171166, 1988.2083414660233],
        [1850.9669477854986, -44153.69178039537, 1994.354863274697],
        [1858.331920957286, -44143.3446852881, 2004.9093759941504],
        [1873.794837933044, -44121.098066615195, 2015.02020814881],
        [1860.7369788380784, -44111.455467413, 2010.3323281504322],
        [1836.3391987176908, -44107.04857050581, 2006.987364289031],
        [1845.590140859812, -44076.23292724796, 2009.5725953005908],
        [1855.2834995179117, -44065.65773711178, 1994.0857456886667],
        [1848.1894545154455, -44056.50400586296, 1991.9895299919715],
        [1839.0674694836498, -44029.69592331099, 1993.184743537375],
        [1859.8110922207204, -44016.59503642244, 1979.093809638742],
        [1846.2163323069512, -44019.038106231645, 1988.1299823032655],
        [1832.5689910797882, -43993.85244027233, 2010.9817112395917],
        [1825.511440665742, -43975.73851172398, 2009.612390384849],
        [1832.4706007767252, -43951.135490124165, 1999.9549824743506],
        [1841.5798778940512, -43949.58393661732, 2006.7912433674176],
        [1821.830068556808, -43918.38570118735, 1998.6359535003867],
        [1833.798129618602, -43920.847743080325, 2020.8757911446194],
        [1835.3749154737304, -43904.849079898726, 2005.7901257148092],
        [1827.571375094547, -43883.61194482763, 2008.100408159693],
        [1806.8289223536033, -43859.487137179654, 1993.5366178919987],
        [1814.865464557578, -43838.93394678689, 2009.1945438630391],
        [1830.1853188631303, -43823.108474180124, 2001.5381394930357],
        [1813.3510608794973, -43818.93987576412, 1987.9888731396793],
        [1819.9676997336662, -43794.5209637082, 2020.3033351953002],
        [1786.8631804398512, -43799.8905278993, 1997.8616924205642],
        [1807.1673306625528, -43783.805480140305, 1999.1864704029358],
        [1814.1188446318897, -43751.846498826235, 1998.593702028449],
        [1818.2204258554855, -43749.196510566595, 2001.8861387593622],
        [1790.6117759778683, -43745.61364235792, 2011.5786546485097],
        [1782.8314311127785, -43716.94082621678, 1993.1983293863943],
        [1785.517979092844, -43717.80351071247, 1985.7297203576804],
        [1787.813223078521, -43684.47241954541, 2019.020588801456],
        [1798.019262235648, -43659.40336078203, 1996.225315315162],
        [1778.3774857468998, -43665.711913795894, 2006.6498811912124],
        [1772.2668197882294, -43633.86679836937, 2016.4617556543944],
        [1778.239084476034, -43613.08557195351, 1991.2954872085147],
        [1789.058038490991, -43618.00517076708, 1982.8366743332776],
        [1766.050312486992, -43592.948545295374, 1987.8375324868243],
        [1780.3494506312093, -43577.5069953998, 2015.8485722700063],
        [1780.1485867154545, -43576.606254382976, 2006.203663213603],
        [1775.271982096019, -43545.52001991491, 1996.9323670564488],
        [1770.843505346837, -43533.20105243233, 1998.8774153717072],
        [1765.8117864436515, -43510.0206313086, 1989.5388200482034],
        [1760.938029935998, -43514.271180158474, 1999.5962998629027],
        [1746.863536606823, -43491.61817477809, 2008.747544717681],
        [1759.5613409227199, -43476.422756843385, 1997.447645528347],
    ])

    # 飞机轨迹数据
    aircraft_positions = np.array([
        [2000.0246503226213, -24969.251815497835, 2000.0424572532502],
        [2000.0369861209904, -24953.863891850542, 2000.0957152908204],
        [2000.049320807866, -24938.467093789328, 2000.168112072065],
        [2000.061632753361, -24923.061486390812, 2000.2594348805897],
        [2000.073897617686, -24907.647116858025, 2000.3691835856762],
        [2000.086105014473, -24892.223956179172, 2000.4960982238053],
        [2000.0982752986224, -24876.7919321282, 2000.6384459644732],
        [2000.1104732051797, -24861.350958683513, 2000.7943080203677],
        [2000.1228162813634, -24845.900949958635, 2000.9617741690154],
        [2000.1354726985585, -24830.441834960176, 2001.1391605083845],
        [2000.1486491683095, -24814.973564559463, 2001.3251665966418],
        [2000.16257255897, -24799.49615533421, 2001.5189547884665],
        [2000.1774628348949, -24784.009638451, 2001.7202553748957],
        [2000.193504331495, -24768.514011060484, 2001.9294082902134],
        [2000.2108383360983, -24753.009278158108, 2002.1471586435973],
        [2000.229561805445, -24737.49550339977, 2002.3744962081637],
        [2000.2497241400015, -24721.972768572552, 2002.6125840806153],
        [2000.2713712789227, -24706.441163141597, 2002.8623641683935],
        [2000.294609064213, -24690.900748836382, 2003.1241736068514],
        [2000.3196664237298, -24675.351533255944, 2003.3974836730386],
        [2000.3469441832392, -24659.79345498293, 2003.6808021127008],
        [2000.3770024922965, -24644.226411632164, 2003.9719442470068],
        [2000.4105442440018, -24628.650276563487, 2004.2682585163293],
        [2000.4483508724627, -24613.0649316753, 2004.5670331267083],
        [2000.4912132264278, -24597.47032204147, 2004.8658304203418],
        [2000.5398726140816, -24581.8665816918, 2005.1627026225415],
        [2000.5949206180687, -24566.25377318544, 2005.456535952273],
        [2000.6567651903736, -24550.631934758596, 2005.747060443955],
        [2000.7256221665264, -24535.001059693266, 2006.034766173735],
        [2000.801528874301, -24519.361103971583, 2006.3207520525511],
        [2000.8843725538075, -24503.711993358098, 2006.6065480594634],
        [2000.9739573347833, -24488.05366383659, 2006.8938393250792],
        [2001.070071643947, -24472.38619896333, 2007.1842286551355],
        [2001.172537075137, -24456.70966040141, 2007.4790960378468],
        [2001.281335848629, -24441.02410642333, 2007.7792474105745],
        [2001.3967073052142, -24425.329554615055, 2008.084701915046],
        [2001.5191709119529, -24409.625980810884, 2008.394702828511],
        [2001.649463301641, -24393.91333792395, 2008.7079504426474],
        [2001.788488171947, -24378.191561967265, 2009.0227738519961],
        [2001.9371847200773, -24362.460595009696, 2009.33748394159],
        [2002.0964320234323, -24346.720486232854, 2009.6505985594385],
        [2002.266936632409, -24330.971356136506, 2009.9610901633378],
        [2002.4491250419396, -24315.213264968555, 2010.2686045132368],
        [2002.6431273175797, -24299.446234131487, 2010.5734543205617],
        [2002.848790756632, -24283.670241360738, 2010.8765513403887],
        [2003.0657185717143, -24267.885224435366, 2011.179291349622],
        [2003.2933539468318, -24252.091095020947, 2011.4833521732653],
        [2003.531092953157, -24236.287872667024, 2011.7904413765127],
        [2003.7783672213461, -24220.475639328193, 2012.1021289489263],
        [2004.0348101162492, -24204.654464483097, 2012.419525092545],
        [2004.3004259398283, -24188.82439049816, 2012.742973002716],
        [2004.5756690642734, -24172.985416567404, 2013.0719362512018],
        [2004.861388072851, -24157.137509582808, 2013.4051487531715],
        [2005.1587268382145, -24141.280617489712, 2013.7408348391682],
        [2005.4689447357591, -24125.414692765073, 2014.0770625504429],
        [2005.7932629432175, -24109.53974600582, 2014.4120248377321],
        [2006.132737929209, -24093.655961042077, 2014.7442508935092],
        [2006.4880522765345, -24077.763438061556, 2015.0729674591958],
        [2006.8594770410068, -24061.862236973182, 2015.398129594084],
        [2007.246884987521, -24045.952358269235, 2015.7203686084322],
        [2007.6498023508962, -24030.033749812872, 2016.0408779068675],
        [2008.0674895353134, -24014.10631608548, 2016.3612578425136],
        [2008.499087288842, -23998.169947789494, 2016.6832613993047],
        [2008.94374946912, -23982.22470678082, 2017.0085653212782],
        [2009.4007557727305, -23966.270641685576, 2017.3386044692988],
        [2009.869740237617, -23950.30781081813, 2017.674222494179],
        [2010.3508434729201, -23934.336241386318, 2018.015462563023],
        [2010.84472657219, -23918.355930197868, 2018.3615765076993],
        [2011.3524298831871, -23902.36686193459, 2018.7112654272041],
        [2011.8752644193387, -23886.369014144664, 2019.06286071881],
        [2012.414582752977, -23870.362374997698, 2019.4146717471567],
        [2012.971630726278, -23854.3470889466, 2019.765190581712],
        [2013.5473308113526, -23838.323314414436, 2020.1134028539773],
        [2014.1421503189922, -23822.291147719472, 2020.4589607620082],
        [2014.7560847079037, -23806.250620382285, 2020.8021845147305],
        [2015.388702282276, -23790.201700866495, 2021.1439794359267],
        [2016.0392195255022, -23774.14430263216, 2021.4857148994497],
        [2016.706615792778, -23758.07829877126, 2021.8290549218736],
        [2017.3898046973682, -23742.003621075728, 2022.175713767656],
        [2018.0877939669886, -23725.92034360324, 2022.5272366311337],
        [2018.7998829023552, -23709.82851088053, 2022.884758050841],
        [2019.525907997488, -23693.728166371548, 2023.2486943519734],
        [2020.2663502233877, -23677.61933258343, 2023.6186294477848],
        [2021.0222516717179, -23661.502018475887, 2023.9934451266408],
        [2021.7950592122231, -23645.37622936517, 2024.3715374439298],
        [2022.5863705421893, -23629.241981844003, 2024.751145218771],
        [2023.3977237290696, -23613.09936193319, 2025.1306081509829],
        [2024.2304130843022, -23596.94862114623, 2025.5085791162128],
        [2025.0852124198325, -23580.78990141145, 2025.8843695663745],
        [2025.9623338634717, -23564.623278772986, 2026.2579769160056],
        [2026.8614555032057, -23548.44874632241, 2026.6300354389368],
        [2027.7817980296986, -23532.26622302567, 2027.0017099203105],
        [2028.7222391015214, -23516.075567574717, 2027.3745489994762],
        [2029.6815048159895, -23499.87661439231, 2027.750252697575],
        [2030.6583505824965, -23483.669388052665, 2028.1304438329753],
        [2031.651754927771, -23467.453905498554, 2028.5164666345827],
        [2032.661225839709, -23451.23021217251, 2028.9090462216554],
        [2033.6869767346277, -23434.99834707484, 2029.308111385557],
        [2034.7299346051177, -23418.758344458514, 2029.7128054187233],
        [2035.7915275922498, -23402.510247470633, 2030.1217368851476],
    ])

    facing_missile, turn_direction = determine_turn_direction(missile_positions, aircraft_positions, True)